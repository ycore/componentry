{"version":3,"file":"avatar.js","sourceRoot":"","sources":["../../../src/catalyst/avatar.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,QAAQ,MAAM,mBAAmB,CAAC;AAC9C,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAc,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAE1C,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AAUjC,MAAM,UAAU,MAAM,CAAC,EAAE,GAAG,GAAG,IAAI,EAAE,MAAM,GAAG,KAAK,EAAE,QAAQ,EAAE,GAAG,GAAG,EAAE,EAAE,SAAS,EAAE,GAAG,KAAK,EAAwD;IAClJ,OAAO,CACL,6BACY,QAAQ,KACd,KAAK,EACT,SAAS,EAAE,IAAI,CACb,SAAS;QACT,eAAe;QACf,0GAA0G,EAC1G,8FAA8F;QAC9F,gCAAgC;QAChC,MAAM,CAAC,CAAC,CAAC,uDAAuD,CAAC,CAAC,CAAC,6BAA6B,CACjG,aAEA,QAAQ,IAAI;YACX,4CAA4C;YAC5C,eAAK,SAAS,EAAC,6EAA6E,EAAC,OAAO,EAAC,aAAa,iBAAc,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,aACrJ,GAAG,IAAI,0BAAQ,GAAG,GAAS,EAC5B,eAAM,CAAC,EAAC,KAAK,EAAC,CAAC,EAAC,KAAK,EAAC,iBAAiB,EAAC,QAAQ,EAAC,gBAAgB,EAAC,QAAQ,EAAC,UAAU,EAAC,QAAQ,EAAC,EAAE,EAAC,QAAQ,YACvG,QAAQ,GACJ,IACH,CACP,EACA,GAAG,IAAI,cAAK,SAAS,EAAC,WAAW,EAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAI,IACpD,CACR,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,MAAM,YAAY,GAAG,UAAU,CAAC,SAAS,YAAY,CAC1D,EAAE,GAAG,EAAE,MAAM,GAAG,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,KAAK,EAAmI,EAC5L,GAAoC;IAEpC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,cAAc,EAAE,wHAAwH,CAAC,CAAC;IAErM,OAAO,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,CACvB,KAAC,IAAI,OAAK,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,EAAE,GAA4C,YACpF,KAAC,WAAW,cACV,KAAC,MAAM,IAAC,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,GAAI,GACtD,GACT,CACR,CAAC,CAAC,CAAC,CACF,KAAC,QAAQ,CAAC,MAAM,OAAK,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,YACtD,KAAC,WAAW,cACV,KAAC,MAAM,IAAC,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,GAAI,GACtD,GACE,CACnB,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import * as Headless from '@headlessui/react';\nimport clsx from 'clsx';\nimport React, { forwardRef } from 'react';\n\nimport { TouchTarget } from './button.js';\nimport { Link } from './link.js';\n\ntype AvatarProps = {\n  src?: string | null;\n  square?: boolean;\n  initials?: string;\n  alt?: string;\n  className?: string;\n};\n\nexport function Avatar({ src = null, square = false, initials, alt = '', className, ...props }: AvatarProps & React.ComponentPropsWithoutRef<'span'>) {\n  return (\n    <span\n      data-slot=\"avatar\"\n      {...props}\n      className={clsx(\n        className,\n        // Basic layout\n        'inline-grid shrink-0 align-middle [--avatar-radius:20%] [--ring-opacity:20%] *:col-start-1 *:row-start-1',\n        '-outline-offset-1 outline outline-black/(--ring-opacity) dark:outline-white/(--ring-opacity)',\n        // Add the correct border radius\n        square ? 'rounded-(--avatar-radius) *:rounded-(--avatar-radius)' : 'rounded-full *:rounded-full'\n      )}\n    >\n      {initials && (\n        // biome-ignore lint/a11y/noSvgWithoutTitle:\n        <svg className=\"size-full select-none fill-current p-[5%] font-medium text-[48px] uppercase\" viewBox=\"0 0 100 100\" aria-hidden={alt ? undefined : 'true'}>\n          {alt && <title>{alt}</title>}\n          <text x=\"50%\" y=\"50%\" alignmentBaseline=\"middle\" dominantBaseline=\"middle\" textAnchor=\"middle\" dy=\".125em\">\n            {initials}\n          </text>\n        </svg>\n      )}\n      {src && <img className=\"size-full\" src={src} alt={alt} />}\n    </span>\n  );\n}\n\nexport const AvatarButton = forwardRef(function AvatarButton(\n  { src, square = false, initials, alt, className, ...props }: AvatarProps & (Omit<Headless.ButtonProps, 'as' | 'className'> | Omit<React.ComponentPropsWithoutRef<typeof Link>, 'className'>),\n  ref: React.ForwardedRef<HTMLElement>\n) {\n  const classes = clsx(className, square ? 'rounded-[20%]' : 'rounded-full', 'relative inline-grid focus:outline-hidden data-focus:outline-2 data-focus:outline-blue-500 data-focus:outline-offset-2');\n\n  return 'href' in props ? (\n    <Link {...props} className={classes} ref={ref as React.ForwardedRef<HTMLAnchorElement>}>\n      <TouchTarget>\n        <Avatar src={src} square={square} initials={initials} alt={alt} />\n      </TouchTarget>\n    </Link>\n  ) : (\n    <Headless.Button {...props} className={classes} ref={ref}>\n      <TouchTarget>\n        <Avatar src={src} square={square} initials={initials} alt={alt} />\n      </TouchTarget>\n    </Headless.Button>\n  );\n});\n"]}