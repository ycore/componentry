{"version":3,"file":"link.js","sourceRoot":"","sources":["../../../src/catalyst/link.tsx"],"names":[],"mappings":";AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,QAAQ,MAAM,mBAAmB,CAAC;AAC9C,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAkB,IAAI,IAAI,UAAU,EAAE,MAAM,cAAc,CAAC;AAElE,MAAM,CAAC,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC,KAAiE,EAAE,GAA0C;IAC9J,OAAO,CACL,KAAC,QAAQ,CAAC,eAAe,cACvB,KAAC,UAAU,OAAK,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,GAAI,GAC1B,CAC5B,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["/**\n * TODO: Update this component to use your client-side framework's link\n * component. We've provided examples of how to do this for Next.js, Remix, and\n * Inertia.js in the Catalyst documentation:\n *\n * https://catalyst.tailwindui.com/docs#client-side-router-integration\n */\n\nimport * as Headless from '@headlessui/react';\nimport React from 'react';\nimport { type LinkProps, Link as RouterLink } from 'react-router';\n\nexport const Link = React.forwardRef(function Link(props: { href: string | LinkProps['to'] } & Omit<LinkProps, 'to'>, ref: React.ForwardedRef<HTMLAnchorElement>) {\n  return (\n    <Headless.DataInteractive>\n      <RouterLink {...props} to={props.href} ref={ref} />\n    </Headless.DataInteractive>\n  );\n});\n"]}