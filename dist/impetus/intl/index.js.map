{
  "version": 3,
  "sources": ["../../../src/impetus/intl/config.ts", "../../../src/impetus/intl/Display.tsx", "../../../src/impetus/intl/index.ts"],
  "sourcesContent": [
    "// ============================================================================\n// Default Internationalization Configuration\n// ============================================================================\n\nimport type { CurrencyFormatPreset, DateFormatPreset, IntlConfig, NumberFormatPreset, SupportedCurrency, SupportedLocale } from './@types/intl.types';\n\n// ============================================================================\n// Date Format Configurations\n// ============================================================================\n\nexport const dateFormatConfigs: Record<DateFormatPreset, Intl.DateTimeFormatOptions> = {\n  short: {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n  },\n  medium: {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  },\n  long: {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  },\n  full: {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    weekday: 'long',\n  },\n  datetime: {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n  },\n  timestamp: {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    second: '2-digit',\n  },\n  relative: {\n    // Placeholder for future relative time formatting\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  },\n};\n\n// ============================================================================\n// Number Format Configurations\n// ============================================================================\n\nexport const numberFormatConfigs: Record<NumberFormatPreset, Intl.NumberFormatOptions> = {\n  integer: {\n    style: 'decimal',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  },\n  decimal: {\n    style: 'decimal',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n  },\n  percent: {\n    style: 'percent',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n  },\n  compact: {\n    style: 'decimal',\n    notation: 'compact',\n    compactDisplay: 'short',\n  },\n  scientific: {\n    style: 'decimal',\n    notation: 'scientific',\n  },\n  ordinal: {\n    style: 'decimal',\n    // Note: Ordinal formatting requires additional logic in component\n  },\n};\n\n// ============================================================================\n// Currency Format Configurations\n// ============================================================================\n\nexport const currencyFormatConfigs: Record<CurrencyFormatPreset, Intl.NumberFormatOptions> = {\n  standard: {\n    style: 'currency',\n    currencyDisplay: 'symbol',\n  },\n  accounting: {\n    style: 'currency',\n    currencyDisplay: 'symbol',\n    currencySign: 'accounting',\n  },\n  compact: {\n    style: 'currency',\n    currencyDisplay: 'symbol',\n    notation: 'compact',\n    compactDisplay: 'short',\n  },\n  name: {\n    style: 'currency',\n    currencyDisplay: 'name',\n  },\n  code: {\n    style: 'currency',\n    currencyDisplay: 'code',\n  },\n};\n\n// ============================================================================\n// Default Configuration\n// ============================================================================\n\nexport const defaultIntlConfig: IntlConfig = {\n  defaultLocale: 'en-US',\n  defaultCurrency: 'USD',\n  fallbackLocale: 'en-US',\n  datePresets: {\n    default: 'medium',\n    fallback: 'short',\n  },\n  numberPresets: {\n    default: 'decimal',\n    fallback: 'integer',\n  },\n  currencyPresets: {\n    default: 'standard',\n    fallback: 'standard',\n  },\n};\n\n// ============================================================================\n// Locale-Currency Mapping\n// ============================================================================\n\nexport const localeCurrencyMap: Record<SupportedLocale, SupportedCurrency> = {\n  'en-US': 'USD',\n  'en-GB': 'GBP',\n  'en-CA': 'CAD',\n  'en-AU': 'AUD',\n  'es-ES': 'EUR',\n  'es-MX': 'MXN',\n  'fr-FR': 'EUR',\n  'fr-CA': 'CAD',\n  'de-DE': 'EUR',\n  'it-IT': 'EUR',\n  'pt-BR': 'BRL',\n  'ja-JP': 'JPY',\n  'ko-KR': 'KRW',\n  'zh-CN': 'CNY',\n  'zh-TW': 'CNY',\n};\n\n// ============================================================================\n// Utility Functions\n// ============================================================================\n\nexport function getLocaleFromBrowser(): SupportedLocale {\n  if (typeof window === 'undefined') {\n    return defaultIntlConfig.defaultLocale;\n  }\n\n  const browserLocale = navigator.language;\n  const supportedLocales = Object.keys(localeCurrencyMap) as SupportedLocale[];\n\n  // Try exact match first\n  if (supportedLocales.includes(browserLocale as SupportedLocale)) {\n    return browserLocale as SupportedLocale;\n  }\n\n  // Try language match (e.g., 'en' matches 'en-US')\n  const languageCode = browserLocale.split('-')[0] || '';\n  const languageMatch = supportedLocales.find(locale => locale.startsWith(languageCode));\n\n  return languageMatch || defaultIntlConfig.fallbackLocale;\n}\n\nexport function getCurrencyForLocale(locale: SupportedLocale): SupportedCurrency {\n  return localeCurrencyMap[locale] || defaultIntlConfig.defaultCurrency;\n}\n\nexport function isValidLocale(locale: string): locale is SupportedLocale {\n  return Object.keys(localeCurrencyMap).includes(locale);\n}\n\nexport function isValidCurrency(currency: string): currency is SupportedCurrency {\n  return Object.values(localeCurrencyMap).includes(currency as SupportedCurrency);\n}\n",
    "import type React from 'react';\nimport type { CurrencyFormatPreset, DateFormatPreset, DisplayCurrencyProps, DisplayDateProps, DisplayNumberProps, IntlConfig, NumberFormatPreset, SupportedCurrency, SupportedLocale } from './@types/intl.types';\n\nimport { currencyFormatConfigs, dateFormatConfigs, defaultIntlConfig, getCurrencyForLocale, isValidCurrency, isValidLocale, numberFormatConfigs } from './config';\n\n// ============================================================================\n// Shared Utility Functions\n// ============================================================================\n\n/**\n * Safely parse various date inputs into a Date object\n */\nfunction parseDate(input: Date | string | number): Date | null {\n  try {\n    if (input instanceof Date) {\n      return Number.isNaN(input.getTime()) ? null : input;\n    }\n\n    if (typeof input === 'string') {\n      const parsed = new Date(input);\n      return Number.isNaN(parsed.getTime()) ? null : parsed;\n    }\n\n    if (typeof input === 'number') {\n      const parsed = new Date(input);\n      return Number.isNaN(parsed.getTime()) ? null : parsed;\n    }\n\n    return null;\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Safely parse various number inputs\n */\nfunction parseNumber(input: number | string): number | null {\n  try {\n    if (typeof input === 'number') {\n      return Number.isNaN(input) || !Number.isFinite(input) ? null : input;\n    }\n\n    if (typeof input === 'string') {\n      // Handle empty strings\n      if (input.trim() === '') return null;\n\n      const parsed = Number(input);\n      return Number.isNaN(parsed) || !Number.isFinite(parsed) ? null : parsed;\n    }\n\n    return null;\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Safely parse various amount inputs\n */\nfunction parseAmount(input: number | string): number | null {\n  try {\n    if (typeof input === 'number') {\n      return Number.isNaN(input) || !Number.isFinite(input) ? null : input;\n    }\n\n    if (typeof input === 'string') {\n      // Handle empty strings\n      if (input.trim() === '') return null;\n\n      // Remove common currency symbols and commas for parsing\n      const cleaned = input.replace(/[$€£¥₹,\\\\s]/g, '');\n      const parsed = Number(cleaned);\n      return Number.isNaN(parsed) || !Number.isFinite(parsed) ? null : parsed;\n    }\n\n    return null;\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Get effective locale with fallback chain\n */\nfunction getEffectiveLocale(locale?: SupportedLocale | string, intlConfig?: Partial<IntlConfig>): SupportedLocale {\n  // Use provided locale if valid\n  if (locale && isValidLocale(locale)) {\n    return locale;\n  }\n\n  // Use config default\n  if (intlConfig?.defaultLocale) {\n    return intlConfig.defaultLocale;\n  }\n\n  // Use system default\n  return defaultIntlConfig.defaultLocale;\n}\n\n// ============================================================================\n// Date Display Component\n// ============================================================================\n\n/**\n * Get effective date format options with fallback chain\n */\nfunction getEffectiveDateOptions(preset?: DateFormatPreset, customOptions?: Intl.DateTimeFormatOptions, intlConfig?: Partial<IntlConfig>): Intl.DateTimeFormatOptions {\n  // Custom options override everything\n  if (customOptions) {\n    return customOptions;\n  }\n\n  // Use preset if provided\n  if (preset && dateFormatConfigs[preset]) {\n    return dateFormatConfigs[preset];\n  }\n\n  // Use config default preset\n  const defaultPreset = intlConfig?.datePresets?.default || defaultIntlConfig.datePresets.default;\n  if (dateFormatConfigs[defaultPreset]) {\n    return dateFormatConfigs[defaultPreset];\n  }\n\n  // Final fallback\n  const fallbackPreset = intlConfig?.datePresets?.fallback || defaultIntlConfig.datePresets.fallback;\n  return dateFormatConfigs[fallbackPreset];\n}\n\n/**\n * Format date with safe error handling for hydration consistency\n */\nfunction formatDateSafely(date: Date, locale: SupportedLocale, options: Intl.DateTimeFormatOptions): string {\n  try {\n    return new Intl.DateTimeFormat(locale, options).format(date);\n  } catch {\n    // Fallback to basic formatting if Intl fails\n    try {\n      return new Intl.DateTimeFormat('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n      }).format(date);\n    } catch {\n      // Last resort fallback\n      return date.toLocaleDateString();\n    }\n  }\n}\n\n/**\n * DisplayDate - A hydration-safe date formatting component\n */\nexport function DisplayDate({ date, locale, preset, options, fallback = 'N/A', className, timeProps, semantic = true, intlConfig }: DisplayDateProps) {\n  // Parse and validate the input date\n  const parsedDate = parseDate(date);\n\n  if (!parsedDate) {\n    const content = <span className={className}>{fallback}</span>;\n    return semantic ? <time {...timeProps}>{content}</time> : content;\n  }\n\n  // Determine effective locale and format options\n  const effectiveLocale = getEffectiveLocale(locale, intlConfig);\n  const effectiveOptions = getEffectiveDateOptions(preset, options, intlConfig);\n\n  // Format the date with safe error handling\n  const formattedDate = formatDateSafely(parsedDate, effectiveLocale, effectiveOptions);\n\n  // Create the formatted content\n  const content = <span className={className}>{formattedDate}</span>;\n\n  // Render with semantic time element if requested\n  if (semantic) {\n    return (\n      <time dateTime={parsedDate.toISOString()} {...timeProps}>\n        {content}\n      </time>\n    );\n  }\n\n  return content;\n}\n\n// ============================================================================\n// Number Display Component\n// ============================================================================\n\n/**\n * Get effective number format options with fallback chain\n */\nfunction getEffectiveNumberOptions(preset?: NumberFormatPreset, customOptions?: Intl.NumberFormatOptions, intlConfig?: Partial<IntlConfig>, ordinalType?: 'cardinal' | 'ordinal'): Intl.NumberFormatOptions {\n  // Custom options override everything\n  if (customOptions) {\n    return customOptions;\n  }\n\n  // Handle ordinal preset with type\n  if (preset === 'ordinal' && ordinalType) {\n    return {\n      ...numberFormatConfigs.ordinal,\n      // Note: Ordinal formatting in Intl API is limited\n      // We'll handle this in the formatting function\n    };\n  }\n\n  // Use preset if provided\n  if (preset && numberFormatConfigs[preset]) {\n    return numberFormatConfigs[preset];\n  }\n\n  // Use config default preset\n  const defaultPreset = intlConfig?.numberPresets?.default || defaultIntlConfig.numberPresets.default;\n  if (numberFormatConfigs[defaultPreset]) {\n    return numberFormatConfigs[defaultPreset];\n  }\n\n  // Final fallback\n  const fallbackPreset = intlConfig?.numberPresets?.fallback || defaultIntlConfig.numberPresets.fallback;\n  return numberFormatConfigs[fallbackPreset];\n}\n\n/**\n * Format ordinal numbers (1st, 2nd, 3rd, etc.)\n */\nfunction formatOrdinal(num: number, locale: SupportedLocale): string {\n  try {\n    // Modern browsers support Intl.PluralRules for ordinals\n    if (typeof Intl !== 'undefined' && 'PluralRules' in Intl) {\n      const pr = new Intl.PluralRules(locale, { type: 'ordinal' });\n      const rule = pr.select(num);\n\n      // English ordinal suffixes\n      const suffixes: Record<string, string> = {\n        one: 'st',\n        two: 'nd',\n        few: 'rd',\n        other: 'th',\n      };\n\n      // For English locales, use proper ordinal logic\n      if (locale.startsWith('en')) {\n        const suffix = suffixes[rule] || 'th';\n        return `${num}${suffix}`;\n      }\n    }\n\n    // Fallback for English\n    if (locale.startsWith('en')) {\n      const lastDigit = num % 10;\n      const lastTwoDigits = num % 100;\n\n      if (lastTwoDigits >= 11 && lastTwoDigits <= 13) {\n        return `${num}th`;\n      }\n\n      switch (lastDigit) {\n        case 1:\n          return `${num}st`;\n        case 2:\n          return `${num}nd`;\n        case 3:\n          return `${num}rd`;\n        default:\n          return `${num}th`;\n      }\n    }\n\n    // For non-English locales, just return the number\n    return num.toString();\n  } catch {\n    return num.toString();\n  }\n}\n\n/**\n * Format number with safe error handling for hydration consistency\n */\nfunction formatNumberSafely(num: number, locale: SupportedLocale, options: Intl.NumberFormatOptions, preset?: NumberFormatPreset, _ordinalType?: 'cardinal' | 'ordinal'): string {\n  try {\n    // Handle ordinal formatting specially\n    if (preset === 'ordinal') {\n      return formatOrdinal(num, locale);\n    }\n\n    return new Intl.NumberFormat(locale, options).format(num);\n  } catch {\n    // Fallback to basic formatting if Intl fails\n    try {\n      return new Intl.NumberFormat('en-US', {\n        style: 'decimal',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 2,\n      }).format(num);\n    } catch {\n      // Last resort fallback\n      return num.toString();\n    }\n  }\n}\n\n/**\n * DisplayNumber - A hydration-safe number formatting component\n */\nexport function DisplayNumber({ value, locale, preset, options, fallback = 'N/A', className, dataAttributes, intlConfig, ordinalType = 'ordinal' }: DisplayNumberProps) {\n  // Parse and validate the input number\n  const parsedNumber = parseNumber(value);\n\n  if (parsedNumber === null) {\n    return (\n      <span className={className} {...dataAttributes}>\n        {fallback}\n      </span>\n    );\n  }\n\n  // Determine effective locale and format options\n  const effectiveLocale = getEffectiveLocale(locale, intlConfig);\n  const effectiveOptions = getEffectiveNumberOptions(preset, options, intlConfig, ordinalType);\n\n  // Format the number with safe error handling\n  const formattedNumber = formatNumberSafely(parsedNumber, effectiveLocale, effectiveOptions, preset, ordinalType);\n\n  // Create data attributes including the raw value\n  const allDataAttributes = {\n    'data-value': parsedNumber.toString(),\n    ...dataAttributes,\n  };\n\n  return (\n    <span className={className} {...allDataAttributes}>\n      {formattedNumber}\n    </span>\n  );\n}\n\n// ============================================================================\n// Currency Display Component\n// ============================================================================\n\n/**\n * Get effective currency with fallback chain\n */\nfunction getEffectiveCurrency(currency?: SupportedCurrency | string, locale?: SupportedLocale, intlConfig?: Partial<IntlConfig>): SupportedCurrency {\n  // Use provided currency if valid\n  if (currency && isValidCurrency(currency)) {\n    return currency;\n  }\n\n  // Use locale's default currency\n  if (locale && isValidLocale(locale)) {\n    return getCurrencyForLocale(locale);\n  }\n\n  // Use config default\n  if (intlConfig?.defaultCurrency) {\n    return intlConfig.defaultCurrency;\n  }\n\n  // Use system default\n  return defaultIntlConfig.defaultCurrency;\n}\n\n/**\n * Get effective currency format options with fallback chain\n */\nfunction getEffectiveCurrencyOptions(\n  preset?: CurrencyFormatPreset,\n  customOptions?: Intl.NumberFormatOptions,\n  intlConfig?: Partial<IntlConfig>,\n  currency?: SupportedCurrency,\n  showSign?: boolean,\n  minimumFractionDigits?: number,\n  maximumFractionDigits?: number\n): Intl.NumberFormatOptions {\n  // Start with preset or default options\n  let baseOptions: Intl.NumberFormatOptions;\n\n  if (customOptions) {\n    baseOptions = { ...customOptions };\n  } else if (preset && currencyFormatConfigs[preset]) {\n    baseOptions = { ...currencyFormatConfigs[preset] };\n  } else {\n    const defaultPreset = intlConfig?.currencyPresets?.default || defaultIntlConfig.currencyPresets.default;\n    baseOptions = { ...currencyFormatConfigs[defaultPreset] };\n  }\n\n  // Add currency if not already set\n  if (currency && !baseOptions.currency) {\n    baseOptions.currency = currency;\n  }\n\n  // Add sign display if requested\n  if (showSign) {\n    baseOptions.signDisplay = 'always';\n  }\n\n  // Override fraction digits if specified\n  if (minimumFractionDigits !== undefined) {\n    baseOptions.minimumFractionDigits = minimumFractionDigits;\n  }\n\n  if (maximumFractionDigits !== undefined) {\n    baseOptions.maximumFractionDigits = maximumFractionDigits;\n  }\n\n  return baseOptions;\n}\n\n/**\n * Format currency with safe error handling for hydration consistency\n */\nfunction formatCurrencySafely(amount: number, locale: SupportedLocale, options: Intl.NumberFormatOptions): string {\n  try {\n    return new Intl.NumberFormat(locale, options).format(amount);\n  } catch {\n    // Fallback to basic currency formatting if Intl fails\n    try {\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: options.currency || 'USD',\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n      }).format(amount);\n    } catch {\n      // Last resort fallback with currency symbol\n      const symbol = options.currency === 'EUR' ? '€' : options.currency === 'GBP' ? '£' : options.currency === 'JPY' ? '¥' : '$';\n      return `${symbol}${amount.toFixed(2)}`;\n    }\n  }\n}\n\n/**\n * DisplayCurrency - A hydration-safe currency formatting component\n */\nexport function DisplayCurrency({ amount, currency, locale, preset, options, fallback = 'N/A', className, dataAttributes, intlConfig, showSign = false, minimumFractionDigits, maximumFractionDigits }: DisplayCurrencyProps) {\n  // Parse and validate the input amount\n  const parsedAmount = parseAmount(amount);\n\n  if (parsedAmount === null) {\n    return (\n      <span className={className} {...dataAttributes}>\n        {fallback}\n      </span>\n    );\n  }\n\n  // Determine effective locale, currency, and format options\n  const effectiveLocale = getEffectiveLocale(locale, intlConfig);\n  const effectiveCurrency = getEffectiveCurrency(currency, effectiveLocale, intlConfig);\n  const effectiveOptions = getEffectiveCurrencyOptions(preset, options, intlConfig, effectiveCurrency, showSign, minimumFractionDigits, maximumFractionDigits);\n\n  // Format the currency with safe error handling\n  const formattedCurrency = formatCurrencySafely(parsedAmount, effectiveLocale, effectiveOptions);\n\n  // Create data attributes including the raw value and currency\n  const allDataAttributes = {\n    'data-amount': parsedAmount.toString(),\n    'data-currency': effectiveCurrency,\n    'data-locale': effectiveLocale,\n    ...dataAttributes,\n  };\n\n  return (\n    <span className={className} {...allDataAttributes}>\n      {formattedCurrency}\n    </span>\n  );\n}\n",
    "// ============================================================================\n// Internationalization Components Export\n// ============================================================================\n\nimport type { DisplayCurrencyProps, DisplayDateProps, DisplayNumberProps } from './@types/intl.types';\nimport { DisplayCurrency, DisplayDate, DisplayNumber } from './Display';\n\n// ============================================================================\n// Date Component with Preset Shortcuts\n// ============================================================================\n\nconst DateShort = (props: Omit<DisplayDateProps, 'preset'>) => DisplayDate({ ...props, preset: 'short' });\nconst DateMedium = (props: Omit<DisplayDateProps, 'preset'>) => DisplayDate({ ...props, preset: 'medium' });\nconst DateLong = (props: Omit<DisplayDateProps, 'preset'>) => DisplayDate({ ...props, preset: 'long' });\nconst DateFull = (props: Omit<DisplayDateProps, 'preset'>) => DisplayDate({ ...props, preset: 'full' });\nconst DateTime = (props: Omit<DisplayDateProps, 'preset'>) => DisplayDate({ ...props, preset: 'datetime' });\nconst Timestamp = (props: Omit<DisplayDateProps, 'preset'>) => DisplayDate({ ...props, preset: 'timestamp' });\n\nexport const DateFormat = Object.assign(DisplayDate, {\n  Short: DateShort,\n  Medium: DateMedium,\n  Long: DateLong,\n  Full: DateFull,\n  DateTime: DateTime,\n  Timestamp: Timestamp,\n});\n\n// For backwards compatibility\nexport { DateFormat as Date };\n\n// ============================================================================\n// Number Component with Preset Shortcuts\n// ============================================================================\n\nconst NumberInteger = (props: Omit<DisplayNumberProps, 'preset'>) => DisplayNumber({ ...props, preset: 'integer' });\nconst NumberDecimal = (props: Omit<DisplayNumberProps, 'preset'>) => DisplayNumber({ ...props, preset: 'decimal' });\nconst NumberPercent = (props: Omit<DisplayNumberProps, 'preset'>) => DisplayNumber({ ...props, preset: 'percent' });\nconst NumberCompact = (props: Omit<DisplayNumberProps, 'preset'>) => DisplayNumber({ ...props, preset: 'compact' });\nconst NumberScientific = (props: Omit<DisplayNumberProps, 'preset'>) => DisplayNumber({ ...props, preset: 'scientific' });\nconst NumberOrdinal = (props: Omit<DisplayNumberProps, 'preset'>) => DisplayNumber({ ...props, preset: 'ordinal' });\n\nexport const NumberFormat = Object.assign(DisplayNumber, {\n  Integer: NumberInteger,\n  Decimal: NumberDecimal,\n  Percent: NumberPercent,\n  Compact: NumberCompact,\n  Scientific: NumberScientific,\n  Ordinal: NumberOrdinal,\n});\n\n// For backwards compatibility\nexport { NumberFormat as Number };\n\n// ============================================================================\n// Currency Component with Preset Shortcuts\n// ============================================================================\n\nconst CurrencyStandard = (props: Omit<DisplayCurrencyProps, 'preset'>) => DisplayCurrency({ ...props, preset: 'standard' });\nconst CurrencyAccounting = (props: Omit<DisplayCurrencyProps, 'preset'>) => DisplayCurrency({ ...props, preset: 'accounting' });\nconst CurrencyCompact = (props: Omit<DisplayCurrencyProps, 'preset'>) => DisplayCurrency({ ...props, preset: 'compact' });\nconst CurrencyName = (props: Omit<DisplayCurrencyProps, 'preset'>) => DisplayCurrency({ ...props, preset: 'name' });\nconst CurrencyCode = (props: Omit<DisplayCurrencyProps, 'preset'>) => DisplayCurrency({ ...props, preset: 'code' });\n\nexport const Currency = Object.assign(DisplayCurrency, {\n  Standard: CurrencyStandard,\n  Accounting: CurrencyAccounting,\n  Compact: CurrencyCompact,\n  Name: CurrencyName,\n  Code: CurrencyCode,\n});\n\n// ============================================================================\n// Specialized Components\n// ============================================================================\n\n/**\n * Component for displaying monetary amounts with automatic currency detection\n */\nexport const Money = ({ amount, locale, className, intlConfig, ...props }: Omit<DisplayCurrencyProps, 'currency' | 'preset'>) =>\n  DisplayCurrency({\n    amount,\n    locale,\n    className,\n    intlConfig,\n    preset: 'standard',\n    ...props,\n  });\n\n/**\n * Component for displaying prices (always positive, with currency symbol)\n */\nexport const Price = ({ amount, className, ...props }: Omit<DisplayCurrencyProps, 'preset'>) => {\n  // Parse amount and make positive\n  const numericAmount = typeof amount === 'string' ? Number.parseFloat(amount) : amount;\n  const positiveAmount = typeof numericAmount === 'number' && !Number.isNaN(numericAmount) ? Math.abs(numericAmount) : amount;\n\n  return DisplayCurrency({\n    amount: positiveAmount,\n    className,\n    preset: 'standard',\n    ...props,\n  });\n};\n\n// ============================================================================\n// Configuration and Utility Exports\n// ============================================================================\n\nexport type { CurrencyFormatPreset, DateFormatPreset, DisplayCurrencyProps, DisplayDateProps, DisplayNumberProps, IntlConfig, NumberFormatPreset, SupportedCurrency, SupportedLocale } from './@types/intl.types';\nexport { defaultIntlConfig } from './config';\n"
  ],
  "mappings": "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",
  "debugId": "36F52DD4901B54D364756E2164756E21",
  "names": []
}