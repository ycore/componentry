{
  "version": 3,
  "sources": ["../../../src/impetus/theme/ThemeProvider.tsx", "../../../src/impetus/theme/ThemeSwitch.tsx", "../../../src/images/SpriteIcon.tsx", "../../../src/impetus/theme/useTheme.tsx", "../../../src/impetus/theme/vendor.ts"],
  "sourcesContent": [
    "import type { ThemeProviderProps } from '../@types/ThemeProvider.types';\n\n// Default props for consistent setup\nexport const themeProviderProps: Partial<ThemeProviderProps> = {\n  attribute: 'class',\n  defaultTheme: 'light',\n  enableSystem: true,\n  disableTransitionOnChange: false,\n};\n",
    "import clsx from 'clsx';\nimport type { MouseEvent } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { SpriteIcon } from '../../images/SpriteIcon';\nimport type { ThemeContext, ThemeSwitchProps, Themes } from '../@types/ThemeSwitch.types';\nimport { useTheme } from './useTheme';\n\nexport const THEME_OPTIONS: Themes = { theme: { light: 'light', dark: 'dark' } } as const;\n\n// Internal button component\nconst ThemeSwitchButton = ({ themeContext, theme, spriteUrl, className, classTheme }: { themeContext: ThemeContext | null; theme: Themes; spriteUrl: string; className?: string; classTheme?: string }) => {\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => setMounted(true), []);\n\n  const resolvedTheme = themeContext?.resolvedTheme;\n  const setTheme = themeContext?.setTheme;\n\n  if (!mounted) return null;\n  return (\n    <button\n      type=\"button\"\n      className={clsx('size-5 hover:animate-rotate', classTheme)}\n      onClick={(e: MouseEvent) => {\n        if (!setTheme) return;\n        setTheme(resolvedTheme === theme.theme.dark ? theme.theme.light : theme.theme.dark);\n        e.preventDefault();\n        e.stopPropagation();\n      }}\n      aria-label=\"theme switch\"\n    >\n      {resolvedTheme === theme.theme.dark ? <SpriteIcon url={spriteUrl} id=\"Moon\" className={clsx('size-5', className)} /> : <SpriteIcon url={spriteUrl} id=\"Sun\" className={clsx('size-5', className)} />}\n    </button>\n  );\n};\n\n// Main ThemeSwitch component with render props pattern\nexport const ThemeSwitch = ({ theme = THEME_OPTIONS, spriteUrl, className, classTheme, children }: ThemeSwitchProps) => {\n  // Try to get theme context, but don't fail if it's not available\n  let themeContext: ThemeContext | null = null;\n  try {\n    const nextThemeContext = useTheme();\n    themeContext = nextThemeContext ? { resolvedTheme: nextThemeContext.resolvedTheme, setTheme: nextThemeContext.setTheme } : null;\n  } catch {\n    // If useTheme hook fails (no provider), themeContext remains null\n    themeContext = null;\n  }\n\n  // If children prop is provided, use render props pattern\n  if (children) {\n    return children({ themeContext, theme, spriteUrl, className, classTheme });\n  }\n\n  // Default behavior: render the button directly\n  return <ThemeSwitchButton themeContext={themeContext} theme={theme} spriteUrl={spriteUrl} className={className} classTheme={classTheme} />;\n};\n",
    "import React from 'react';\nimport type { SpriteIconProps } from './@types/SpriteIcon.types';\n\n/**\n * Renders an SVG icon using a sprite sheet.\n *\n * @template IconId - The type of the icon ID within the sprite sheet (defaults to string).\n * @param props - The properties for the SpriteIcon component.\n * @param props.url - The URL of the SVG sprite sheet.\n * @param props.id - The ID of the icon within the sprite sheet. If not provided, the entire sprite is used.\n * @returns An SVG element referencing the specified icon from the sprite sheet.\n */\nexport function SpriteIcon<IconId extends string = string>({ url, id, ...props }: SpriteIconProps<string, IconId>) {\n  return (\n    // biome-ignore lint/a11y/noSvgWithoutTitle: acceptable\n    <svg {...props}>{id ? <use href={`${url}#${id}`} /> : <use href={`${url}`} />}</svg>\n  );\n}\n\n/**\n * Creates a pre-configured SpriteIcon component bound to a specific sprite URL.\n *\n * @template IconId - The type of sprite icon IDs available in the sprite sheet\n * @param spriteUrl - The URL of the SVG sprite sheet\n * @returns A configured SpriteIcon component that only requires the icon ID\n */\nexport function createSpriteIcon<IconId extends string>(spriteUrl: string) {\n  return function SpriteIconComponent({ id, ...props }: { id: IconId } & Omit<SpriteIconProps<string, IconId>, 'url'>) {\n    return <SpriteIcon url={spriteUrl} id={id} {...props} />;\n  };\n}",
    "import { useTheme as useNextTheme } from 'next-themes';\n\n// Re-export the useTheme hook with the same interface\nexport const useTheme = useNextTheme;\n",
    "import { ThemeProvider as NextThemeProvider } from 'next-themes';\nexport const ThemeProvider = NextThemeProvider;\n"
  ],
  "mappings": ";AAGO,IAAM,qBAAkD;AAAA,EAC7D,WAAW;AAAA,EACX,cAAc;AAAA,EACd,cAAc;AAAA,EACd,2BAA2B;AAC7B;;ACRA;AAEA;;;;ACUO,SAAS,UAA0C,GAAG,KAAK,OAAO,SAA0C;AAAA,EACjH,uBAEE,IAAgF,OAAhF;AAAA,OAAS;AAAA,IAAT,UAAiB,qBAAK,IAAC,OAAD;AAAA,MAAK,MAAM,GAAG,OAAO;AAAA,KAAM,oBAAK,IAAC,OAAD;AAAA,MAAK,MAAM,GAAG;AAAA,KAAO;AAAA,GAAK;AAAA;;;ACfpF,qBAAS;AAGF,IAAM,WAAW;;;;AFKjB,IAAM,gBAAwB,EAAE,OAAO,EAAE,OAAO,SAAS,MAAM,OAAO,EAAE;AAG/E,IAAM,oBAAoB,GAAG,cAAc,OAAO,WAAW,WAAW,iBAAmI;AAAA,EACzM,OAAO,SAAS,cAAc,SAAS,KAAK;AAAA,EAE5C,UAAU,MAAM,WAAW,IAAI,GAAG,CAAC,CAAC;AAAA,EAEpC,MAAM,gBAAgB,cAAc;AAAA,EACpC,MAAM,WAAW,cAAc;AAAA,EAE/B,KAAK;AAAA,IAAS,OAAO;AAAA,EACrB,uBACE,KAYE,UAZF;AAAA,IACE,MAAK;AAAA,IACL,WAAW,KAAK,+BAA+B,UAAU;AAAA,IACzD,SAAS,CAAC,MAAkB;AAAA,MAC1B,KAAK;AAAA,QAAU;AAAA,MACf,SAAS,kBAAkB,MAAM,MAAM,OAAO,MAAM,MAAM,QAAQ,MAAM,MAAM,IAAI;AAAA,MAClF,EAAE,eAAe;AAAA,MACjB,EAAE,gBAAgB;AAAA;AAAA,IAEpB,cAAW;AAAA,IATb,UAWG,kBAAkB,MAAM,MAAM,uBAAO,KAAC,YAAD;AAAA,MAAY,KAAK;AAAA,MAAW,IAAG;AAAA,MAAO,WAAW,KAAK,UAAU,SAAS;AAAA,KAAG,oBAAK,KAAC,YAAD;AAAA,MAAY,KAAK;AAAA,MAAW,IAAG;AAAA,MAAM,WAAW,KAAK,UAAU,SAAS;AAAA,KAAG;AAAA,GAClM;AAAA;AAKC,IAAM,cAAc,GAAG,QAAQ,eAAe,WAAW,WAAW,YAAY,eAAiC;AAAA,EAEtH,IAAI,eAAoC;AAAA,EACxC,IAAI;AAAA,IACF,MAAM,mBAAmB,SAAS;AAAA,IAClC,eAAe,mBAAmB,EAAE,eAAe,iBAAiB,eAAe,UAAU,iBAAiB,SAAS,IAAI;AAAA,IAC3H,MAAM;AAAA,IAEN,eAAe;AAAA;AAAA,EAIjB,IAAI,UAAU;AAAA,IACZ,OAAO,SAAS,EAAE,cAAc,OAAO,WAAW,WAAW,WAAW,CAAC;AAAA,EAC3E;AAAA,EAGA,uBAAO,KAAC,mBAAD;AAAA,IAAmB;AAAA,IAA4B;AAAA,IAAc;AAAA,IAAsB;AAAA,IAAsB;AAAA,GAAwB;AAAA;;AGvD1I,0BAAS;AACF,IAAM,gBAAgB;",
  "debugId": "2890586DFE02196F64756E2164756E21",
  "names": []
}