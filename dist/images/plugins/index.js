// src/images/plugins/icon-spritesheet.ts
import fs from "node:fs/promises";
import path from "node:path";
import { glob } from "glob";
import { parse } from "node-html-parser";
function iconSpritesheets(args) {
  const configs = Array.isArray(args) ? args : [args];
  const spriteSheetFiles = configs.map((config) => config.spriteFileName);
  return configs.map((config, index) => {
    const { inputDir, outputDir, spriteFileName = "icon-sprites.svg", typesFileName, inputFilespec, ignoreLimit = true, nameTransformer } = config;
    const spritesheetFactory = async () => createSpritesheet({ inputDir, outputDir, spriteFileName, typesFileName, inputFilespec, nameTransformer });
    return {
      name: `icon-spritesheet${index > 0 ? index.toString() : ""}`,
      async buildStart() {
        await spritesheetFactory();
      },
      config(config2) {
        if (index === 0 && ignoreLimit !== false) {
          const originalLimit = config2.build?.assetsInlineLimit || 4096;
          config2.build = config2.build || {};
          config2.build.assetsInlineLimit = (filePath, content) => {
            const isSprite = spriteSheetFiles.some((spriteFile) => filePath.includes(spriteFile));
            if (isSprite)
              return false;
            if (typeof originalLimit === "function") {
              return originalLimit(filePath, content);
            }
            return content.length <= originalLimit ? undefined : false;
          };
        }
      }
    };
  });
}
var createSpritesheet = async ({ inputDir, outputDir, spriteFileName, typesFileName, inputFilespec, nameTransformer }) => {
  const outputFilePath = path.join(outputDir, spriteFileName);
  const files = glob.sync(inputFilespec || ["**/*.svg"], { cwd: inputDir });
  if (files.length === 0) {
    console.warn(`⚠️  No SVG files found in ${inputDir}`);
    return;
  }
  const symbols = await Promise.all(files.map(async (file) => {
    const inputFilePath = path.join(inputDir, file);
    const rootNode = await readSvgFile(inputFilePath);
    const svgNode = rootNode.querySelector("svg");
    if (!svgNode) {
      console.warn(`⚠️ No SVG element found in ${file}`);
      return;
    }
    svgNode.tagName = "symbol";
    svgNode.setAttribute("id", transformIconName(file, nameTransformer));
    for (const attr of ["xmlns", "xmlns:xlink", "version", "width", "height"]) {
      svgNode.removeAttribute(attr);
    }
    return svgNode.toString().trim();
  }));
  const svgContent = svgFileTemplate(symbols);
  await writeChangedFile(outputFilePath, svgContent, files.length);
  if (typesFileName) {
    const names = files.map((file) => transformIconName(file, nameTransformer));
    const typesContent = svgTypesTemplate(names);
    await writeChangedFile(typesFileName, typesContent, files.length);
  }
};
function transformIconName(fileName, transformer) {
  const strippedName = fileName.replace(/\..*?$/, "");
  return (transformer || kebabToPascal)(strippedName);
}
function kebabToPascal(str) {
  return str.split("-").map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join("");
}
function svgFileTemplate(symbols) {
  return [
    '<?xml version="1.0" encoding="UTF-8"?>',
    '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="0" height="0">',
    "<defs>",
    ...symbols.filter(Boolean),
    "</defs>",
    "</svg>"
  ].join(`
`);
}
function svgTypesTemplate(names) {
  return ["// Generated by icon-spritesheet", "", "export const iconNames = [", ...names.map((name) => `  '${name}',`), "] as const", "", "export type IconName = typeof iconNames[number]", ""].join(`
`);
}
async function readSvgFile(filePath) {
  const input = await fs.readFile(filePath, "utf8");
  return parse(input);
}
async function writeChangedFile(filepath, newContent, count) {
  try {
    const dirPath = path.dirname(filepath);
    await fs.mkdir(dirPath, { recursive: true });
    console.info(`*️⃣  Processing ${count} sprites for: ${filepath}`);
    const existingContent = await fs.readFile(filepath, "utf8");
    if (existingContent !== newContent) {
      await fs.writeFile(filepath, newContent, "utf8");
      console.info(`  ✅ Updated SVG sprite: ${filepath}`);
    }
  } catch (_e) {
    await fs.writeFile(filepath, newContent, "utf8");
    console.info(`  ✅ Created SVG sprite: ${filepath}`);
  }
}
export {
  iconSpritesheets
};

//# debugId=46A7E2F42178DDFD64756E2164756E21
