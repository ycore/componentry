{
  "version": 3,
  "sources": ["../../../src/images/plugins/icon-spritesheet.ts"],
  "sourcesContent": [
    "import fs from 'node:fs/promises';\nimport path from 'node:path';\nimport { glob } from 'glob';\nimport { parse } from 'node-html-parser';\nimport type { Plugin } from 'vite';\nimport type { IconSpriteConfig } from '../@types/icon-spritesheet.types';\n\nexport function iconSpritesheets(args: IconSpriteConfig | IconSpriteConfig[]) {\n  const configs = Array.isArray(args) ? args : [args];\n  const spriteSheetFiles = configs.map(config => config.spriteFileName);\n\n  return configs.map((config, index) => {\n    const { inputDir, outputDir, spriteFileName = 'icon-sprites.svg', typesFileName, inputFilespec, ignoreLimit = true, nameTransformer } = config;\n    const spritesheetFactory = async () => createSpritesheet({ inputDir, outputDir, spriteFileName, typesFileName, inputFilespec, nameTransformer });\n\n    return {\n      name: `icon-spritesheet${index > 0 ? index.toString() : ''}`,\n      async buildStart() {\n        await spritesheetFactory();\n      },\n      config(config) {\n        if (index === 0 && ignoreLimit !== false) {\n          // Auto-configure assetsInlineLimit for spriteSheetFiles\n          const originalLimit = config.build?.assetsInlineLimit || 4096;\n\n          config.build = config.build || {};\n          config.build.assetsInlineLimit = (filePath: string, content: Buffer) => {\n            // Don't inline any sprite files, regardless of size to avoid CORS issues\n            const isSprite = spriteSheetFiles.some(spriteFile => filePath.includes(spriteFile));\n            if (isSprite) return false;\n\n            // For non-sprite files, use original limit logic\n            if (typeof originalLimit === 'function') {\n              return originalLimit(filePath, content);\n            }\n\n            // If originalLimit is a number, check if content size exceeds it\n            return content.length <= originalLimit ? undefined : false;\n          };\n        }\n      },\n    } satisfies Plugin<IconSpriteConfig>;\n  });\n}\n\nexport const createSpritesheet = async ({ inputDir, outputDir, spriteFileName, typesFileName, inputFilespec, nameTransformer }: IconSpriteConfig) => {\n  const outputFilePath = path.join(outputDir, spriteFileName);\n  const files = glob.sync(inputFilespec || ['**/*.svg'], { cwd: inputDir });\n  if (files.length === 0) {\n    console.warn(`⚠️  No SVG files found in ${inputDir}`);\n    return;\n  }\n\n  const symbols = await Promise.all(\n    files.map(async file => {\n      const inputFilePath = path.join(inputDir, file);\n      const rootNode = await readSvgFile(inputFilePath);\n      const svgNode = rootNode.querySelector('svg');\n      if (!svgNode) {\n        console.warn(`⚠️ No SVG element found in ${file}`);\n        return;\n      }\n\n      svgNode.tagName = 'symbol';\n      svgNode.setAttribute('id', transformIconName(file, nameTransformer));\n      for (const attr of ['xmlns', 'xmlns:xlink', 'version', 'width', 'height']) {\n        svgNode.removeAttribute(attr);\n      }\n      return svgNode.toString().trim();\n    })\n  );\n  const svgContent = svgFileTemplate(symbols);\n  await writeChangedFile(outputFilePath, svgContent, files.length);\n\n  // write types file if typesFileName exists\n  if (typesFileName) {\n    const names = files.map((file: string) => transformIconName(file, nameTransformer));\n    const typesContent = svgTypesTemplate(names);\n    await writeChangedFile(typesFileName, typesContent, files.length);\n  }\n};\n\nfunction transformIconName(fileName: string, transformer?: (iconName: string) => string): string {\n  const strippedName = fileName.replace(/\\..*?$/, '');\n  return (transformer || kebabToPascal)(strippedName);\n}\n\nfunction kebabToPascal(str: string): string {\n  return str\n    .split('-')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join('');\n}\n\nfunction svgFileTemplate(symbols: (string | undefined)[]): string {\n  return [\n    // https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs\n    '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"0\" height=\"0\">',\n    '<defs>',\n    ...symbols.filter(Boolean),\n    '</defs>',\n    '</svg>',\n  ].join('\\n');\n}\n\nfunction svgTypesTemplate(names: (string | undefined)[]): string {\n  return ['// Generated by icon-spritesheet', '', 'export const iconNames = [', ...names.map(name => `  '${name}',`), '] as const', '', 'export type IconName = typeof iconNames[number]', ''].join('\\n');\n}\n\nasync function readSvgFile(filePath: string) {\n  const input = await fs.readFile(filePath, 'utf8');\n  return parse(input);\n}\n\nasync function writeChangedFile(filepath: string, newContent: string, count: number) {\n  try {\n    const dirPath = path.dirname(filepath);\n    await fs.mkdir(dirPath, { recursive: true });\n    console.info(`*️⃣  Processing ${count} sprites for: ${filepath}`);\n\n    const existingContent = await fs.readFile(filepath, 'utf8');\n    if (existingContent !== newContent) {\n      await fs.writeFile(filepath, newContent, 'utf8');\n      console.info(`  ✅ Updated SVG sprite: ${filepath}`);\n    }\n  } catch (_e) {\n    await fs.writeFile(filepath, newContent, 'utf8');\n    console.info(`  ✅ Created SVG sprite: ${filepath}`);\n  }\n}\n"
  ],
  "mappings": "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",
  "debugId": "46A7E2F42178DDFD64756E2164756E21",
  "names": []
}