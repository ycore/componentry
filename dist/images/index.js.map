{
  "version": 3,
  "sources": ["../../src/images/LazyImage.tsx", "../../src/shadcn-ui/custom/spinner.tsx", "../../src/images/SpriteIcon.tsx"],
  "sourcesContent": [
    "import clsx from 'clsx';\nimport React from 'react';\nimport { Await } from 'react-router';\n\nimport { Spinner } from '../shadcn-ui/custom/spinner';\nimport type { ImageData, LazyGalleryProps, LazyImageProps } from './@types/LazyImage.types';\n\nexport const imageLoader = async (filenames: Record<string, () => Promise<unknown>>) => {\n  return Object.keys(filenames).map(filePath => filePath.replace(/.*\\/(.*)/, '$1'));\n};\n\nexport const createRemoteImagePromise = (src: string, alt: string, width?: number, height?: number): Promise<ImageData> => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => {\n      resolve({ src, alt, width: width || img.naturalWidth, height: height || img.naturalHeight, loading: 'lazy' });\n    };\n    img.onerror = () => {\n      reject(new Error(`Failed to load image: ${src}`));\n    };\n    img.src = src;\n  });\n};\n\nexport function LazyImage({\n  image,\n  src,\n  alt,\n  width,\n  height,\n  className,\n  spriteUrl,\n  fallback = spriteUrl ? <Spinner spriteUrl={spriteUrl} /> : <div className=\"text-slate-500/50\">Loading...</div>,\n}: LazyImageProps) {\n  const imagePromise = image || (src ? createRemoteImagePromise(src, alt || '', width, height) : null);\n\n  if (!imagePromise) {\n    return <div className=\"text-slate-500/50\">Error: No image source provided</div>;\n  }\n\n  return (\n    <React.Suspense fallback={fallback}>\n      <TypedAwait<ImageData>\n        resolve={imagePromise}\n        errorElement={spriteUrl ? <Spinner spriteUrl={spriteUrl} className=\"text-slate-500/50\" /> : <div className=\"text-slate-500/50\">Error loading image</div>}\n      >\n        {(imageData: ImageData) => <ImageElement {...imageData} className={clsx(imageData.className, className)} />}\n      </TypedAwait>\n    </React.Suspense>\n  );\n}\n\nexport function LazyGallery({\n  images,\n  className,\n  imageClass,\n  spriteUrl,\n  fallback = spriteUrl ? <Spinner spriteUrl={spriteUrl} className=\"h-[180px]\" /> : <div className=\"h-[180px] text-slate-500/50\">Loading...</div>,\n}: LazyGalleryProps) {\n  return (\n    <div className={className}>\n      {images.map(imgPromise => (\n        <LazyImage key={imgPromise.toString()} image={imgPromise} className={imageClass} spriteUrl={spriteUrl} fallback={fallback} />\n      ))}\n    </div>\n  );\n}\n\nfunction TypedAwait<T>({ resolve, children, ...props }: { resolve: Promise<T>; children: (data: T) => React.ReactNode;[key: string]: unknown }) {\n  return (\n    <Await resolve={resolve} {...props}>\n      {data => children(data as T)}\n    </Await>\n  );\n}\n\nconst ImageElement: React.FC<ImageData> = ({ src, alt, width, height, className, loading = 'lazy' }) => {\n  return <img src={src} alt={alt} width={width} height={height} className={className} loading={loading} decoding=\"async\" />;\n};\n",
    "import clsx from 'clsx';\nimport React from 'react';\nimport { SpriteIcon } from '../../images/SpriteIcon';\nimport type { IconName } from '../@types/lucide-sprites';\nimport type { SpinnerProps } from './@types/spinner.types';\n\nexport function Spinner({ className, spriteUrl, iconId = 'Loader' }: SpinnerProps) {\n  return <SpriteIcon<IconName> id={iconId} url={spriteUrl} className={clsx(className, 'animate-spin')} />;\n}\n",
    "import React from 'react';\nimport type { SpriteIconProps } from './@types/SpriteIcon.types';\n\n/**\n * Renders an SVG icon using a sprite sheet.\n *\n * @template IconId - The type of the icon ID within the sprite sheet (defaults to string).\n * @param props - The properties for the SpriteIcon component.\n * @param props.url - The URL of the SVG sprite sheet.\n * @param props.id - The ID of the icon within the sprite sheet. If not provided, the entire sprite is used.\n * @returns An SVG element referencing the specified icon from the sprite sheet.\n */\nexport function SpriteIcon<IconId extends string = string>({ url, id, ...props }: SpriteIconProps<string, IconId>) {\n  return (\n    // biome-ignore lint/a11y/noSvgWithoutTitle: acceptable\n    <svg {...props}>{id ? <use href={`${url}#${id}`} /> : <use href={`${url}`} />}</svg>\n  );\n}\n\n/**\n * Creates a pre-configured SpriteIcon component bound to a specific sprite URL.\n *\n * @template IconId - The type of sprite icon IDs available in the sprite sheet\n * @param spriteUrl - The URL of the SVG sprite sheet\n * @returns A configured SpriteIcon component that only requires the icon ID\n */\nexport function createSpriteIcon<IconId extends string>(spriteUrl: string) {\n  return function SpriteIconComponent({ id, ...props }: { id: IconId } & Omit<SpriteIconProps<string, IconId>, 'url'>) {\n    return <SpriteIcon url={spriteUrl} id={id} {...props} />;\n  };\n}"
  ],
  "mappings": "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",
  "debugId": "D44B83C0F4CD192664756E2164756E21",
  "names": []
}