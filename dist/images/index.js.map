{
  "version": 3,
  "sources": ["../../src/images/LazyImage.tsx", "../../src/shadcn-ui/components/spinner.tsx", "../../src/vibrant/components/svg-icon.tsx", "../../src/images/SpriteIconProvider.tsx", "../../src/images/SpriteIcon.tsx"],
  "sourcesContent": [
    "import clsx from 'clsx';\nimport React from 'react';\nimport { Await } from 'react-router';\n\nimport { Spinner } from '../shadcn-ui/components/spinner';\nimport type { ImageData, LazyGalleryProps, LazyImageProps } from './@types/LazyImage.types';\n\nexport const imageLoader = async (filenames: Record<string, () => Promise<unknown>>) => {\n  return Object.keys(filenames).map(filePath => filePath.replace(/.*\\/(.*)/, '$1'));\n};\n\nexport const createRemoteImagePromise = (src: string, alt: string, width?: number, height?: number): Promise<ImageData> => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => {\n      resolve({ src, alt, width: width || img.naturalWidth, height: height || img.naturalHeight, loading: 'lazy' });\n    };\n    img.onerror = () => {\n      reject(new Error(`Failed to load image: ${src}`));\n    };\n    img.src = src;\n  });\n};\n\nexport function LazyImage({ image, src, alt, width, height, className, spriteUrl, fallback = spriteUrl ? <Spinner /> : <div className=\"text-slate-500/50\">Loading...</div> }: LazyImageProps) {\n  const imagePromise = image || (src ? createRemoteImagePromise(src, alt || '', width, height) : null);\n\n  if (!imagePromise) {\n    return <div className=\"text-slate-500/50\">Error: No image source provided</div>;\n  }\n\n  return (\n    <React.Suspense fallback={fallback}>\n      <TypedAwait<ImageData> resolve={imagePromise} errorElement={spriteUrl ? <Spinner className=\"text-slate-500/50\" /> : <div className=\"text-slate-500/50\">Error loading image</div>}>\n        {(imageData: ImageData) => <ImageElement {...imageData} className={clsx(imageData.className, className)} />}\n      </TypedAwait>\n    </React.Suspense>\n  );\n}\n\nexport function LazyGallery({ images, className, imageClass, spriteUrl, fallback = spriteUrl ? <Spinner className=\"h-[180px]\" /> : <div className=\"h-[180px] text-slate-500/50\">Loading...</div> }: LazyGalleryProps) {\n  return (\n    <div className={className}>\n      {images.map(imgPromise => (\n        <LazyImage key={imgPromise.toString()} image={imgPromise} className={imageClass} spriteUrl={spriteUrl} fallback={fallback} />\n      ))}\n    </div>\n  );\n}\n\nfunction TypedAwait<T>({ resolve, children, ...props }: { resolve: Promise<T>; children: (data: T) => React.ReactNode; [key: string]: unknown }) {\n  return (\n    <Await resolve={resolve} {...props}>\n      {data => children(data as T)}\n    </Await>\n  );\n}\n\nconst ImageElement: React.FC<ImageData> = ({ src, alt, width, height, className, loading = 'lazy' }) => {\n  return <img src={src} alt={alt} width={width} height={height} className={className} loading={loading} decoding=\"async\" />;\n};\n",
    "import clsx from 'clsx';\nimport React from 'react';\nimport type { IconName } from '../../vibrant/@types/lucide-sprites';\nimport { SvgIcon } from '../../vibrant/components/svg-icon';\n\nfunction Spinner({ className, iconId = 'Loader', ...props }: React.ComponentProps<'svg'> & { iconId?: IconName }) {\n  return <SvgIcon iconId={iconId} role=\"status\" aria-label=\"Loading\" className={clsx('size-4 animate-spin', className)} {...props} />;\n}\n\nexport { Spinner };\n",
    "import { createSpriteIcon } from '@ycore/componentry/images';\nimport type { IconName } from '../@types/lucide-sprites';\n\n/**\n * Pre-configured SpriteIcon component for Lucide icons.\n *\n * Resolves sprite URLs from SpriteIconProvider context using the 'lucide' key.\n * The consuming app must configure the provider in root.tsx with:\n *\n * @example\n * ```tsx\n * import lucideSpriteUrl from '@ycore/componentry/vibrant/assets/lucide-sprites.svg?url';\n * <SpriteIconProvider sprites={{ lucide: lucideSpriteUrl }}>\n * ```\n */\nexport const SvgIcon = createSpriteIcon<IconName>('lucide');\n",
    "import { createContext, useContext } from 'react';\n\n/**\n * Configuration mapping sprite keys to resolved URLs\n */\nexport interface SpriteIconConfig {\n  [key: string]: string;\n}\n\n/**\n * Context for sprite icon configuration\n */\nconst SpriteIconContext = createContext<SpriteIconConfig | null>(null);\n\n/**\n * Hook to retrieve a resolved sprite URL by key from Context.\n *\n * Must be used within a SpriteIconProvider.\n *\n * @example\n * ```tsx\n * const spriteUrl = useSpriteIcon('lucide');\n * <MarkdownPage spriteUrl={spriteUrl} />\n * ```\n */\nexport function useSpriteIcon(spriteKey: string): string {\n  const config = useContext(SpriteIconContext);\n\n  if (!config) {\n    throw new Error(\n      'useSpriteIcon must be used within a SpriteIconProvider. ' +\n      'Wrap your app with <SpriteIconProvider sprites={{...}}>.'\n    );\n  }\n\n  if (!config[spriteKey]) {\n    throw new Error(\n      `Sprite key \"${spriteKey}\" not found in SpriteIconProvider. ` +\n      `Available keys: ${Object.keys(config).join(', ')}`\n    );\n  }\n\n  return config[spriteKey];\n}\n\n/**\n * Provider component that makes sprite URLs available to SpriteIcon components\n *\n * Configure at the app level to resolve sprite URLs using your asset resolution strategy.\n *\n * @example\n * ```tsx\n * // app/root.tsx\n * import lucideSpriteUrl from '@ycore/componentry/vibrant/assets/lucide-sprites.svg?url';\n *\n * export default function App() {\n *   return (\n *     <SpriteIconProvider sprites={{ lucide: lucideSpriteUrl }}>\n *       <Outlet />\n *     </SpriteIconProvider>\n *   );\n * }\n * ```\n */\nexport function SpriteIconProvider({\n  sprites,\n  children\n}: {\n  sprites: SpriteIconConfig;\n  children: React.ReactNode;\n}) {\n  return (\n    <SpriteIconContext.Provider value={sprites}>\n      {children}\n    </SpriteIconContext.Provider>\n  );\n}\n",
    "import React from 'react';\nimport type { SpriteIconProps } from './@types/SpriteIcon.types';\nimport { useSpriteIcon } from './SpriteIconProvider';\n\n/**\n * Renders an SVG icon using a sprite sheet.\n *\n * @template IconId - The type of the icon ID within the sprite sheet.\n * @param props.spriteUrl - The URL of the SVG sprite sheet.\n * @param props.iconId - The ID of the icon within the sprite sheet. If not provided, the entire sprite is used.\n * @param props - The properties for the svg element.\n * @returns An SVG element referencing the specified icon from the sprite sheet.\n */\nexport function SpriteIcon<IconId extends string = string>({ spriteUrl, iconId, ...props }: SpriteIconProps<string, IconId>) {\n  return (\n    // biome-ignore lint/a11y/noSvgWithoutTitle: acceptable\n    <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" {...props}>\n      {iconId ? <use href={`${spriteUrl}#${iconId}`} /> : <use href={`${spriteUrl}`} />}\n    </svg>\n  );\n}\n\n/**\n * Creates a pre-configured SpriteIcon component bound to a sprite key from Context.\n *\n * @template IconId - The type of sprite icon IDs available in the sprite sheet\n * @param spriteKey - Key to look up sprite URL from SpriteIconProvider (e.g., 'lucide', 'example')\n * @returns Configured SpriteIcon component requiring only iconId prop\n *\n * @example\n * ```tsx\n * const Icon = createSpriteIcon<IconName>('lucide');\n * <Icon iconId=\"Home\" className=\"size-6\" />\n * ```\n */\nexport function createSpriteIcon<IconId extends string>(spriteKey: string) {\n  return function SpriteIconComponent({ iconId, ...props }: { iconId: IconId } & Omit<SpriteIconProps<string, IconId>, 'spriteUrl'>) {\n    const spriteUrl = useSpriteIcon(spriteKey);\n    return <SpriteIcon spriteUrl={spriteUrl} iconId={iconId} {...props} />;\n  };\n}\n"
  ],
  "mappings": "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",
  "debugId": "E03BB52D0193CABE64756E2164756E21",
  "names": []
}