{"version":3,"sources":["../../src/impetus/index.ts","../../src/impetus/LazyImage.tsx","../../src/impetus/Spinner.tsx","../../src/impetus/SpriteIcon.tsx"],"sourcesContent":["export type { ImageData } from './@types/LazyImage.types';\nexport { imageLoader, LazyGallery, LazyImage } from './LazyImage';\nexport { Spinner } from './Spinner';\nexport { SpriteIcon } from './SpriteIcon';\n","import clsx from 'clsx';\nimport React from 'react';\nimport { Await } from 'react-router';\n\nimport type { ImageData, LazyGalleryProps, LazyImageProps } from './@types/LazyImage.types';\nimport { Spinner } from './Spinner';\n\nconst Image: React.FC<ImageData> = ({ src, alt, width, height, className, loading = 'lazy' }) => {\n  return <img src={src} alt={alt} width={width} height={height} className={className} loading={loading} decoding=\"async\" />;\n};\n\nexport const imageLoader = async (filenames: Record<string, () => Promise<unknown>>) => {\n  return Object.keys(filenames).map(filePath => filePath.replace(/.*\\/(.*)/, '$1'));\n};\n\nexport function LazyImage({ image, className, fallback = <Spinner /> }: LazyImageProps) {\n  return (\n    <React.Suspense fallback={fallback}>\n      <TypedAwait<ImageData> resolve={image} errorElement={<Spinner className=\"text-red-500\" />}>\n        {(imageData: ImageData) => <Image {...imageData} className={clsx(imageData.className, className)} />}\n      </TypedAwait>\n    </React.Suspense>\n  );\n}\n\nexport function LazyGallery({ images, className, imageClass, fallback = <Spinner className=\"h-[180px]\" /> }: LazyGalleryProps) {\n  return (\n    <div className={className}>\n      {images.map((imgPromise, index) => (\n        // biome-ignore lint/suspicious/noArrayIndexKey:\n        <LazyImage key={index} image={imgPromise} className={imageClass} fallback={fallback} />\n      ))}\n    </div>\n  );\n}\n\nfunction TypedAwait<T>({ resolve, children, ...props }: { resolve: Promise<T>; children: (data: T) => React.ReactNode; [key: string]: unknown }) {\n  return (\n    <Await resolve={resolve} {...props}>\n      {data => children(data as T)}\n    </Await>\n  );\n}\n\n// InViewImage and InviewGallery works well, but the `loading` attribute of modern browsers are simpler\n// These implementations can however possibly still be usefull for large gallery displays\n// requires `react-intersection-observer`\n//\n// import { useInView } from 'react-intersection-observer';\n// export function InviewGallery({ images, className, imageClass, fallback }: LazyGalleryProps) {\n//   return (\n//     <div className={clsx('grid grid-cols-1 gap-4', className)}>\n//       {images.map((imgPromise, index) => (\n//         <InViewImage key={index} image={imgPromise} className={imageClass} fallback={fallback} />\n//       ))}\n//     </div>\n//   );\n// }\n\n// export function InViewImage({ image, className, fallback }: LazyImageProps) {\n//   const { ref, inView } = useInView({ triggerOnce: true, rootMargin: '50px 0px' });\n\n//   return (\n//     <div ref={ref}>\n//       {/* <div ref={ref} className=\"min-h-[150px]\"> */}\n//       {inView && <LazyImage image={image} className={className} fallback={fallback} />}\n//     </div>\n//   );\n// }\n","import clsx from 'clsx';\n\nexport function Spinner({ className }: { className?: string }) {\n  return <div className={clsx(className, 'h-4 w-4 animate-spin rounded-full border-t-2 border-t-current border-r-2 border-r-transparent')} aria-label=\"Loading\" />;\n}\n","import type React from 'react';\n\nimport type { SpriteIconProps } from './@types/SpriteIcon.types';\n\nexport function SpriteIcon<IconUrl extends string>({ url, id, ...props }: SpriteIconProps<IconUrl>) {\n  return (\n    // biome-ignore lint/a11y/noSvgWithoutTitle:\n    <svg {...props}>{id ? <use href={`${url}#${id}`} /> : <use href={`${url}`} />}</svg>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA,eAAiB;AACjB,mBAAkB;AAClB,0BAAsB;;;ACFtB,kBAAiB;AAGR;AADF,SAAS,QAAQ,EAAE,UAAU,GAA2B;AAC7D,SAAO,4CAAC,SAAI,eAAW,YAAAC,SAAK,WAAW,+FAA+F,GAAG,cAAW,WAAU;AAChK;;;ADIS,IAAAC,sBAAA;AADT,IAAM,QAA6B,CAAC,EAAE,KAAK,KAAK,OAAO,QAAQ,WAAW,UAAU,OAAO,MAAM;AAC/F,SAAO,6CAAC,SAAI,KAAU,KAAU,OAAc,QAAgB,WAAsB,SAAkB,UAAS,SAAQ;AACzH;AAEO,IAAM,cAAc,OAAO,cAAsD;AACtF,SAAO,OAAO,KAAK,SAAS,EAAE,IAAI,cAAY,SAAS,QAAQ,YAAY,IAAI,CAAC;AAClF;AAEO,SAAS,UAAU,EAAE,OAAO,WAAW,WAAW,6CAAC,WAAQ,EAAG,GAAmB;AACtF,SACE,6CAAC,aAAAC,QAAM,UAAN,EAAe,UACd,uDAAC,cAAsB,SAAS,OAAO,cAAc,6CAAC,WAAQ,WAAU,gBAAe,GACpF,WAAC,cAAyB,6CAAC,SAAO,GAAG,WAAW,eAAW,aAAAC,SAAK,UAAU,WAAW,SAAS,GAAG,GACpG,GACF;AAEJ;AAEO,SAAS,YAAY,EAAE,QAAQ,WAAW,YAAY,WAAW,6CAAC,WAAQ,WAAU,aAAY,EAAG,GAAqB;AAC7H,SACE,6CAAC,SAAI,WACF,iBAAO,IAAI,CAAC,YAAY;AAAA;AAAA,IAEvB,6CAAC,aAAsB,OAAO,YAAY,WAAW,YAAY,YAAjD,KAAqE;AAAA,GACtF,GACH;AAEJ;AAEA,SAAS,WAAc,EAAE,SAAS,UAAU,GAAG,MAAM,GAA4F;AAC/I,SACE,6CAAC,6BAAM,SAAmB,GAAG,OAC1B,oBAAQ,SAAS,IAAS,GAC7B;AAEJ;;;AEnC0B,IAAAC,sBAAA;AAHnB,SAAS,WAAmC,EAAE,KAAK,IAAI,GAAG,MAAM,GAA6B;AAClG;AAAA;AAAA,IAEE,6CAAC,SAAK,GAAG,OAAQ,eAAK,6CAAC,SAAI,MAAM,GAAG,GAAG,IAAI,EAAE,IAAI,IAAK,6CAAC,SAAI,MAAM,GAAG,GAAG,IAAI,GAAG;AAAA;AAElF;","names":["import_clsx","clsx","import_jsx_runtime","React","clsx","import_jsx_runtime"]}