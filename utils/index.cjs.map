{"version":3,"sources":["../../src/utils/index.ts","../../src/utils/icon-importer.ts"],"sourcesContent":["export { iconImporter } from './icon-importer';\n","// icon-importer.ts\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\nimport { pathToFileURL } from 'node:url';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { normalizePath } from 'vite';\n\n/**\n * A Vite plugin that imports React icon components and renders them as SVG files.\n *\n * @param iconImportConfig - Configuration array for icon imports\n * @returns A Vite plugin object\n *\n * @example\n * ```ts\n * // vite.config.ts\n * import { defineConfig } from 'vite'\n * import { iconImporter } from './vite-icon-importer-plugin'\n *\n * export default defineConfig({\n *   plugins: [\n *     iconImporter([\n *       {\n *         inputUrl: 'node_modules/@heroicons/react/24/solid',\n *         outputDir: 'resources/assets/icon-heroicons',\n *         fileNames: ['HomeIcon.js', 'UserCircleIcon.js', 'ArrowDownLeftIcon.js']\n *       }\n *     ])\n *   ]\n * })\n * ```\n */\n// biome-ignore lint/suspicious/noExplicitAny:\nexport function iconImporter(iconImportConfig: any) {\n  // biome-ignore lint/suspicious/noExplicitAny:\n  let viteResolve: any;\n  return {\n    name: 'vite-plugin-icon-importer',\n    async buildStart() {\n      for (const config of iconImportConfig) {\n        await fs.mkdir(config.outputDir, { recursive: true });\n        console.info(`üîÑ Populating ${config.outputDir}`);\n\n        for (const fileName of config.fileNames) {\n          try {\n            const outputFileName = snakeToKebab(fileName.replace(/(?:Icon)?\\.js$/, '.svg'));\n            const outputPath = path.join(config.outputDir, outputFileName);\n\n            const componentUrl = pathToFileURL(`${config.inputUrl}/${fileName}`).href;\n            const module = await import(componentUrl);\n            const Component = module.default;\n            const element = React.createElement(Component, null);\n            const svgContent = ReactDOMServer.renderToStaticMarkup(element);\n\n            let existingContent = '';\n            try {\n              existingContent = await fs.readFile(outputPath, 'utf8');\n            } catch {}\n\n            if (existingContent !== svgContent) {\n              await fs.writeFile(outputPath, svgContent);\n              console.log(` ‚û°Ô∏è Generated: ${normalizePath(outputPath)}`);\n            }\n          } catch (error) {\n            console.error(`‚ùå  Error processing ${fileName}:`, (error as Error)?.message || String(error));\n          }\n        }\n      }\n    },\n  };\n}\n\nfunction snakeToKebab(str: string): string {\n  return str\n    .replace(/_/g, '-')\n    .replace(/([a-z])([A-Z])/g, '$1-$2')\n    .toLowerCase();\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,sBAAe;AACf,uBAAiB;AACjB,sBAA8B;AAC9B,mBAAkB;AAClB,oBAA2B;AAC3B,kBAA8B;AA4BvB,SAAS,aAAa,kBAAuB;AAElD,MAAI;AACJ,SAAO;AAAA,IACL,MAAM;AAAA,IACN,MAAM,aAAa;AACjB,iBAAW,UAAU,kBAAkB;AACrC,cAAM,gBAAAA,QAAG,MAAM,OAAO,WAAW,EAAE,WAAW,KAAK,CAAC;AACpD,gBAAQ,KAAK,wBAAiB,OAAO,SAAS,EAAE;AAEhD,mBAAW,YAAY,OAAO,WAAW;AACvC,cAAI;AACF,kBAAM,iBAAiB,aAAa,SAAS,QAAQ,kBAAkB,MAAM,CAAC;AAC9E,kBAAM,aAAa,iBAAAC,QAAK,KAAK,OAAO,WAAW,cAAc;AAE7D,kBAAM,mBAAe,+BAAc,GAAG,OAAO,QAAQ,IAAI,QAAQ,EAAE,EAAE;AACrE,kBAAMC,UAAS,MAAM,OAAO;AAC5B,kBAAM,YAAYA,QAAO;AACzB,kBAAM,UAAU,aAAAC,QAAM,cAAc,WAAW,IAAI;AACnD,kBAAM,aAAa,cAAAC,QAAe,qBAAqB,OAAO;AAE9D,gBAAI,kBAAkB;AACtB,gBAAI;AACF,gCAAkB,MAAM,gBAAAJ,QAAG,SAAS,YAAY,MAAM;AAAA,YACxD,QAAQ;AAAA,YAAC;AAET,gBAAI,oBAAoB,YAAY;AAClC,oBAAM,gBAAAA,QAAG,UAAU,YAAY,UAAU;AACzC,sBAAQ,IAAI,gCAAkB,2BAAc,UAAU,CAAC,EAAE;AAAA,YAC3D;AAAA,UACF,SAAS,OAAO;AACd,oBAAQ,MAAM,4BAAuB,QAAQ,KAAM,OAAiB,WAAW,OAAO,KAAK,CAAC;AAAA,UAC9F;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAEA,SAAS,aAAa,KAAqB;AACzC,SAAO,IACJ,QAAQ,MAAM,GAAG,EACjB,QAAQ,mBAAmB,OAAO,EAClC,YAAY;AACjB;","names":["fs","path","module","React","ReactDOMServer"]}